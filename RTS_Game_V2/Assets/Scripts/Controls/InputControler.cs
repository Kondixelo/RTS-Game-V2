//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Controls/InputControler.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControler : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControler()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControler"",
    ""maps"": [
        {
            ""name"": ""SwitchingMap"",
            ""id"": ""f03dbec2-7c8c-4442-8a09-28ae2b6289a4"",
            ""actions"": [
                {
                    ""name"": ""KeyboardAndMouse"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4697964a-9b40-49ff-946c-4ff3d55da020"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gamepad"",
                    ""type"": ""Button"",
                    ""id"": ""63b225bf-e012-464d-9d7d-16798ce35cda"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchScheme"",
                    ""type"": ""Button"",
                    ""id"": ""445105ff-c2b0-436e-8c17-6ee4cb4ad03f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""det"",
                    ""type"": ""Button"",
                    ""id"": ""d03b7a10-47cf-46c7-b650-e47bb68ab189"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0ef666a9-b031-4d3b-be4c-6f5386541d31"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeboardAndMouse"",
                    ""action"": ""KeyboardAndMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb2b09cb-1fe9-47da-aadd-3732e29fed54"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeboardAndMouse"",
                    ""action"": ""KeyboardAndMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36b8bc5e-a7f6-4f23-b7b6-9bea1e77ffa4"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Gamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e62de6a-1321-49c6-8934-121445c5a79b"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeboardAndMouse"",
                    ""action"": ""SwitchScheme"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6c92598-ab79-4e52-82b0-3d83f484fc93"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeboardAndMouse"",
                    ""action"": ""SwitchScheme"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32e474ea-fcf6-46ab-ab1f-639a837f35a6"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SwitchScheme"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18b369eb-0505-4080-ba75-845b87d5f790"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeboardAndMouse"",
                    ""action"": ""det"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""912046c6-4e0b-4ea8-8fbd-a1e7024cacda"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""det"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeboardAndMouse"",
            ""bindingGroup"": ""KeboardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // SwitchingMap
        m_SwitchingMap = asset.FindActionMap("SwitchingMap", throwIfNotFound: true);
        m_SwitchingMap_KeyboardAndMouse = m_SwitchingMap.FindAction("KeyboardAndMouse", throwIfNotFound: true);
        m_SwitchingMap_Gamepad = m_SwitchingMap.FindAction("Gamepad", throwIfNotFound: true);
        m_SwitchingMap_SwitchScheme = m_SwitchingMap.FindAction("SwitchScheme", throwIfNotFound: true);
        m_SwitchingMap_det = m_SwitchingMap.FindAction("det", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SwitchingMap
    private readonly InputActionMap m_SwitchingMap;
    private ISwitchingMapActions m_SwitchingMapActionsCallbackInterface;
    private readonly InputAction m_SwitchingMap_KeyboardAndMouse;
    private readonly InputAction m_SwitchingMap_Gamepad;
    private readonly InputAction m_SwitchingMap_SwitchScheme;
    private readonly InputAction m_SwitchingMap_det;
    public struct SwitchingMapActions
    {
        private @InputControler m_Wrapper;
        public SwitchingMapActions(@InputControler wrapper) { m_Wrapper = wrapper; }
        public InputAction @KeyboardAndMouse => m_Wrapper.m_SwitchingMap_KeyboardAndMouse;
        public InputAction @Gamepad => m_Wrapper.m_SwitchingMap_Gamepad;
        public InputAction @SwitchScheme => m_Wrapper.m_SwitchingMap_SwitchScheme;
        public InputAction @det => m_Wrapper.m_SwitchingMap_det;
        public InputActionMap Get() { return m_Wrapper.m_SwitchingMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SwitchingMapActions set) { return set.Get(); }
        public void SetCallbacks(ISwitchingMapActions instance)
        {
            if (m_Wrapper.m_SwitchingMapActionsCallbackInterface != null)
            {
                @KeyboardAndMouse.started -= m_Wrapper.m_SwitchingMapActionsCallbackInterface.OnKeyboardAndMouse;
                @KeyboardAndMouse.performed -= m_Wrapper.m_SwitchingMapActionsCallbackInterface.OnKeyboardAndMouse;
                @KeyboardAndMouse.canceled -= m_Wrapper.m_SwitchingMapActionsCallbackInterface.OnKeyboardAndMouse;
                @Gamepad.started -= m_Wrapper.m_SwitchingMapActionsCallbackInterface.OnGamepad;
                @Gamepad.performed -= m_Wrapper.m_SwitchingMapActionsCallbackInterface.OnGamepad;
                @Gamepad.canceled -= m_Wrapper.m_SwitchingMapActionsCallbackInterface.OnGamepad;
                @SwitchScheme.started -= m_Wrapper.m_SwitchingMapActionsCallbackInterface.OnSwitchScheme;
                @SwitchScheme.performed -= m_Wrapper.m_SwitchingMapActionsCallbackInterface.OnSwitchScheme;
                @SwitchScheme.canceled -= m_Wrapper.m_SwitchingMapActionsCallbackInterface.OnSwitchScheme;
                @det.started -= m_Wrapper.m_SwitchingMapActionsCallbackInterface.OnDet;
                @det.performed -= m_Wrapper.m_SwitchingMapActionsCallbackInterface.OnDet;
                @det.canceled -= m_Wrapper.m_SwitchingMapActionsCallbackInterface.OnDet;
            }
            m_Wrapper.m_SwitchingMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @KeyboardAndMouse.started += instance.OnKeyboardAndMouse;
                @KeyboardAndMouse.performed += instance.OnKeyboardAndMouse;
                @KeyboardAndMouse.canceled += instance.OnKeyboardAndMouse;
                @Gamepad.started += instance.OnGamepad;
                @Gamepad.performed += instance.OnGamepad;
                @Gamepad.canceled += instance.OnGamepad;
                @SwitchScheme.started += instance.OnSwitchScheme;
                @SwitchScheme.performed += instance.OnSwitchScheme;
                @SwitchScheme.canceled += instance.OnSwitchScheme;
                @det.started += instance.OnDet;
                @det.performed += instance.OnDet;
                @det.canceled += instance.OnDet;
            }
        }
    }
    public SwitchingMapActions @SwitchingMap => new SwitchingMapActions(this);
    private int m_KeboardAndMouseSchemeIndex = -1;
    public InputControlScheme KeboardAndMouseScheme
    {
        get
        {
            if (m_KeboardAndMouseSchemeIndex == -1) m_KeboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeboardAndMouse");
            return asset.controlSchemes[m_KeboardAndMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface ISwitchingMapActions
    {
        void OnKeyboardAndMouse(InputAction.CallbackContext context);
        void OnGamepad(InputAction.CallbackContext context);
        void OnSwitchScheme(InputAction.CallbackContext context);
        void OnDet(InputAction.CallbackContext context);
    }
}
